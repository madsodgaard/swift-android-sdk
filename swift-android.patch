diff --git a/swift/utils/build-script-impl b/swift/utils/build-script-impl
index 16e05052609..7ab8cebfab8 100755
--- a/swift/utils/build-script-impl
+++ b/swift/utils/build-script-impl
@@ -2622,6 +2622,7 @@ for host in "${ALL_HOSTS[@]}"; do
                     echo "Cleaning the libdispatch build directory"
                     call rm -rf "${LIBDISPATCH_BUILD_DIR}"
                   fi
+                  call ln -sf "${SWIFT_BUILD_PATH}/lib/swift" "${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib"
 
                   cmake_options=(
                     -DENABLE_SWIFT=YES
diff --git a/swift-corelibs-foundation/Sources/Foundation/CMakeLists.txt b/swift-corelibs-foundation/Sources/Foundation/CMakeLists.txt
index 016bf294..5c42986a 100644
--- a/swift-corelibs-foundation/Sources/Foundation/CMakeLists.txt
+++ b/swift-corelibs-foundation/Sources/Foundation/CMakeLists.txt
@@ -174,6 +174,12 @@
     target_link_libraries(Foundation PUBLIC
         swiftDispatch)
 endif()
+  if(${CMAKE_SYSTEM_NAME} STREQUAL Android)
+    target_link_libraries(Foundation PRIVATE android-spawn)
+    list(GET CMAKE_FIND_ROOT_PATH 0 SPAWN_DIR)
+    target_include_directories(Foundation PUBLIC ${SPAWN_DIR}/usr/include)
+    target_link_directories(Foundation PUBLIC ${SPAWN_DIR}/usr/lib)
+  endif()
 
 if(LINKER_SUPPORTS_BUILD_ID)
   target_link_options(Foundation PRIVATE "LINKER:--build-id=sha1")
diff --git a/swift-corelibs-foundation/Sources/Foundation/Process.swift b/swift-corelibs-foundation/Sources/Foundation/Process.swift
index 758dd1df..02970992 100644
--- a/swift-corelibs-foundation/Sources/Foundation/Process.swift
+++ b/swift-corelibs-foundation/Sources/Foundation/Process.swift
@@ -944,7 +944,7 @@ open class Process: NSObject, @unchecked Sendable {
         var spawnAttrs: posix_spawnattr_t = posix_spawnattr_t()
 #endif
         try _throwIfPosixError(posix_spawnattr_init(&spawnAttrs))
-#if os(Android)
+#if os(Windows)
         guard var spawnAttrs else {
             throw NSError(domain: NSPOSIXErrorDomain, code: Int(errno),
                           userInfo: [NSURLErrorKey:self.executableURL!])
diff --git a/swift-testing/Sources/Testing/CMakeLists.txt b/swift-testing/Sources/Testing/CMakeLists.tx
index e40cb1b..ff2f920 100644
--- a/swift-testing/Sources/Testing/CMakeLists.txt
+++ b/swift-testing/Sources/Testing/CMakeLists.txt
@@ -110,7 +110,10 @@ target_link_libraries(Testing PRIVATE
 if(NOT APPLE)
   if(NOT CMAKE_SYSTEM_NAME STREQUAL WASI)
     target_link_libraries(Testing PUBLIC
-      dispatch)
+      dispatch android-execinfo)
+    list(GET CMAKE_FIND_ROOT_PATH 0 BT_DIR)
+    target_include_directories(Testing PUBLIC ${BT_DIR}/usr/include)
+    target_link_directories(Testing PUBLIC ${BT_DIR}/usr/lib)
   endif()
   target_link_libraries(Testing PUBLIC
     Foundation)
diff --git a/swift-foundation/Sources/FoundationEssentials/Platform.swift b/swift-foundation/Sources/FoundationEssentials/Platform.swift
index da4977b..6587ccd 100644
--- a/swift-foundation/Sources/FoundationEssentials/Platform.swift
+++ b/swift-foundation/Sources/FoundationEssentials/Platform.swift
@@ -164,9 +164,13 @@ extension Platform {
     }
     
     static func gid(forName name: String) -> uid_t? {
+        #if os(Android)
+            return nil
+        #else
         withUserGroupBuffer(name, group(), sizeProperty: Int32(_SC_GETGR_R_SIZE_MAX), operation: getgrnam_r) {
             $0.gr_gid
         }
+        #endif
     }
     
     static func name(forUID uid: uid_t) -> String? {
@@ -193,12 +197,16 @@ extension Platform {
     }
     
     static func name(forGID gid: gid_t) -> String? {
+        #if os(Android)
+            return nil
+        #else
         withUserGroupBuffer(gid, group(), sizeProperty: Int32(_SC_GETGR_R_SIZE_MAX), operation: getgrgid_r) {
             // Android's gr_name `char *`` is nullable when it should be non-null.
             // FIXME: avoid the coerce cast workaround once https://github.com/android/ndk/issues/2098 is fixed.
             let gr_name: UnsafeMutablePointer<CChar>? = $0.gr_name
             return gr_name.flatMap { String(cString: $0) }
         }
+        #endif
     }
     
     static func homeDirectory(forUserName userName: String) -> String? {
diff --git a/swift-testing/Sources/Testing/SourceAttribution/Backtrace.swift b/swift-testing/Sources/Testing/SourceAttribution/Backtrace.swift
index 9781575..2d87215 100644
--- a/swift-testing/Sources/Testing/SourceAttribution/Backtrace.swift
+++ b/swift-testing/Sources/Testing/SourceAttribution/Backtrace.swift
@@ -65,7 +65,7 @@ public struct Backtrace: Sendable {
       } else {
         initializedCount = .init(clamping: backtrace(addresses.baseAddress!, .init(clamping: addresses.count)))
       }
-#elseif os(Android)
+#elseif os(AndroidDISABLED)
       initializedCount = addresses.withMemoryRebound(to: UnsafeMutableRawPointer.self) { addresses in
         .init(clamping: backtrace(addresses.baseAddress!, .init(clamping: addresses.count)))
       }


